generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
}

model User {
  id        String    @id @default(uuid())
  name      String
  email     String    @unique
  password  String
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")
  role      UserRole  @default(ADMIN)

  @@map("users")
}

model Company {
  id        String    @id @default(uuid())
  name      String
  cnpj      String
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")

  branchs BranchCompany[]

  @@map("companies")
}

model BranchCompany {
  id        Int       @id @default(autoincrement())
  name      String
  companyId String    @map("company_id")
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")

  company            Company             @relation(fields: [companyId], references: [id])
  accountsReceivable AccountReceivable[]

  @@map("branchs")
}

model Client {
  id            Int       @id @default(autoincrement())
  name          String
  email         String    @unique()
  password      String
  cnpjcpf       String    @unique()
  address       String
  numberAddress String    @map("number_address")
  neighborhood  String
  cep           String
  city          String
  uf            String
  phone         String
  obs           String?
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime? @updatedAt @map("updated_at")

  accountsReceivable AccountReceivable[]

  @@map("clients")
}

model AccountReceivable {
  id              String    @id @default(uuid())
  clientId        Int       @map("client_id")
  sdoc            String
  ndoc            String
  installment     Int
  branchCompanyId Int       @map("branch_company_id")
  amount          Decimal
  createdAt       DateTime  @default(now()) @map("created_at")
  updatedAt       DateTime? @updatedAt @map("updated_at")

  client             Client               @relation(fields: [clientId], references: [id])
  branch             BranchCompany        @relation(fields: [branchCompanyId], references: [id])
  accountInstallment AccountInstallment[]

  @@map("accounts_receivable")
}

model AccountInstallment {
  id                  String    @id @default(uuid())
  installment         Int
  amount              Decimal
  remains             Decimal   @default(0.00)
  dueDate             DateTime  @default(now()) @map("due_date")
  accountReceivableId String    @map("account_receivable_id")
  createdAt           DateTime  @default(now()) @map("created_at")
  updatedAt           DateTime? @updatedAt @map("updated_at")

  accountReceivable AccountReceivable @relation(fields: [accountReceivableId], references: [id])

  @@map("accounts_installments")
}
